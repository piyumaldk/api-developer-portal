name: Build and Prepare Release Assets

on:
  push:
    tags:
      - 'v*'  # Trigger on tag creation

permissions:
  contents: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get the latest release from the API Developer Portal Core repo
        id: get_latest_release
        run: |
          latest_release=$(curl -s https://api.github.com/repos/piyumaldk/api-developer-portal-core/releases/latest)
          echo "Latest release tag: $(echo $latest_release | jq -r .tag_name)"
          echo "Latest release assets: $(echo $latest_release | jq -r .assets[].name)"
          echo "latest_release_tag=$(echo $latest_release | jq -r .tag_name)" >> $GITHUB_ENV
          echo "assets=$(echo $latest_release | jq -r '.assets[].name' | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Download assets from the latest release
        run: |
          for asset in ${{ env.assets }}; do
            echo "Downloading asset: $asset"
            curl -L -o $asset https://github.com/piyumaldk/api-developer-portal-core/releases/download/${{ env.latest_release_tag }}/$asset
          done

      - name: Prepare and Zip Files for Each Asset
        run: |
          # Create a temporary directory for the zips
          mkdir -p temp_zips

          # Loop through each asset and package it with required files
          for asset in ${{ env.assets }}; do
            # Skip if the asset is a source code tar.gz or zip
            if [[ "$asset" == *source* ]]; then
              continue
            fi

            echo "Processing asset: $asset"

            # Create a temporary directory for each zip content
            mkdir -p temp_copy_dir

            # Copy required files and directories
            cp -r src temp_copy_dir/
            cp -r artifacts temp_copy_dir/
            cp config.js temp_copy_dir/
            cp README.md temp_copy_dir/
            cp "$asset" temp_copy_dir/  # Add the specific asset file

            # Create a zip file with the asset name
            zip_name="temp_zips/$asset.zip"
            echo "Creating zip file: $zip_name"
            zip -r "$zip_name" temp_copy_dir/*

            # Clean up the temporary directory for the next asset
            rm -rf temp_copy_dir
          done

      - name: List Created Zip Files
        run: ls -R temp_zips

      - name: Upload Zips to GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.latest_release_tag }}
          name: WSO2 API Developer Portal Core ${{ env.latest_release_tag }}
          body: "Automated release with custom assets including necessary scripts and files."
          draft: false
          prerelease: false
          artifacts: "./temp_zips/*"  # Upload all zips in the temp_zips folder
          allowUpdates: true
